import axios, { AxiosInstance } from 'axios';
import 'dotenv/config';

export interface TelegramMessage {
  message_id: number;
  text?: string;
  date: number;
  chat: {
    id: number;
    type: string;
    title?: string;
    username?: string;
  };
}

export class TelegramAPIClient {
  private axiosInstance: AxiosInstance;

  constructor(private botToken: string) {
    if (!botToken) {
      console.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω");
      throw new Error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω');
    }

    this.axiosInstance = axios.create({
      baseURL: `https://api.telegram.org/bot${this.botToken}`,
    });
  }

  /** –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ */
  async sendMessage(chatId: string | number, text: string): Promise<TelegramMessage | null> {
    try {
      const response = await this.axiosInstance.post('/sendMessage', {
        chat_id: chatId,
        text,
      });
      return response.data.result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram sendMessage:', error);
      return null;
    }
  }

  /** –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –∞–ø–¥–µ–π—Ç—ã (polling) */
  async getUpdates(offset?: number): Promise<TelegramMessage[]> {
    try {
      const response = await this.axiosInstance.get('/getUpdates', {
        params: { offset },
      });
      return response.data.result.map((u: any) => u.message).filter(Boolean);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram getUpdates:', error);
      return [];
    }
  }

  /** –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Webhook */
  async setWebhook(url: string): Promise<boolean> {
    try {
      const response = await this.axiosInstance.post('/setWebhook', { url });
      console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${url}`);
      return response.data.ok;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook:', error);
      return false;
    }
  }

  /** –£–¥–∞–ª–∏—Ç—å Webhook */
  async deleteWebhook(): Promise<boolean> {
    try {
      const response = await this.axiosInstance.post('/deleteWebhook');
      console.log('‚úÖ Webhook —É–¥–∞–ª—ë–Ω');
      return response.data.ok;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ Webhook:', error);
      return false;
    }
  }

  /** –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Webhook */
  async getWebhookInfo(): Promise<any> {
    try {
      const response = await this.axiosInstance.get('/getWebhookInfo');
      return response.data.result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ getWebhookInfo:', error);
      return null;
    }
  }
}

// === –¢–µ—Å—Ç–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ===
async function main() {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ Telegram API –∫–ª–∏–µ–Ω—Ç–∞...\n");

  const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || "your-token-bot";
  const CHAT_ID = process.env.GROUP_CHAT_ID || "your-token-bot";
  if (!BOT_TOKEN || !CHAT_ID) {
    console.error("‚ùå –£–∫–∞–∂–∏ TELEGRAM_BOT_TOKEN –∏ TEST_CHAT_ID –≤ .env");
    process.exit(1);
  }

  const telegram = new TelegramAPIClient(BOT_TOKEN);

  // –û—Ç–ø—Ä–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const msg = await telegram.sendMessage(CHAT_ID, "–ü—Ä–∏–≤–µ—Ç üëã –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API");
  if (msg) {
    console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", msg.text);
  }

  // –ü–æ–ª—É—á–∏–º –∞–ø–¥–µ–π—Ç—ã (–µ—Å–ª–∏ webhook –Ω–µ —Å—Ç–æ–∏—Ç)
  const updates = await telegram.getUpdates();
  if (updates.length > 0) {
    console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ ${updates.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    updates.forEach((u) =>
      console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${u.chat.username || u.chat.id}: ${u.text}`)
    );
  } else {
    console.log("‚ö†Ô∏è –ù–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤ –Ω–µ—Ç (–ª–∏–±–æ —Å—Ç–æ–∏—Ç webhook).");
  }

  console.log("\n‚úÖ –†–∞–±–æ—Ç–∞ Telegram API –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
}

if (require.main === module) {
  main().catch(console.error);
}

export default TelegramAPIClient;
