import { GuildMember, EmbedBuilder, ActivityType } from "discord.js";
import { hiddenRoles } from "@config/config"

// ----------- STATIC EMBEDS -----------

export const HighUserPermission = new EmbedBuilder()
  .setColor("DarkRed")
  .setTitle("üõ°Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç üõ°Ô∏è")
  .setDescription("**–Ø –Ω–µ –º–æ–≥—É –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.**");


// export const mediaEmbedDeny = new EmbedBuilder()
//     .setTitle(`‚ùå | –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!`)
//     .setColor("Red")
//     .setFooter({
//       text: `–°–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å! üòò`
//     })—Ü
//     .setDescription(`
//       > **–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –æ—à–∏–±–ª–∏—Å—å –≤ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏. ü§î**
//     `)
//   .setImage('https://i.imgur.com/01CDedR.png');
// export const mediaEmbedAccept = new EmbedBuilder()
//     .setTitle(`‚úÖ | –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞!`)
//     .setColor("Green")
//     .setFooter({
//       text: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–æ—Ä—Ç! ü§© `
//     })
//     .setDescription(`
//       > **–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞. üéâ**
//     `)
//     .setImage('https://i.imgur.com/pvetRC1.png');

// export const mediaEmbedWait = new EmbedBuilder()
//     .setTitle(`‚ùî | –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏!`)
//     .setColor("White")
//     .setFooter({
//       text: `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. ü§ó`
//     })
//     .setDescription(`
//       > **–ú—ã —É–≤–∏–¥–µ–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É! –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –º—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∑–∞—è–≤–∫—É. üòã**
//     `)
//     .setImage('https://i.imgur.com/xsXpIzG.png');

// ----------- DYNAMIC EMBEDS -----------

export function CooldownEmbed(cooldownTime: string) {
  return (
    new EmbedBuilder()
      .setTitle("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ")
      .setDescription(
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ **${cooldownTime}** –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–∞—á–µ–π –∑–∞—è–≤–∫–∏.`
      )
      // .setImage('https://i.imgur.com/LBzVWtd.jpeg')
      .setColor("#ea473f")
      .setFooter({
        text: "–°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫",
        iconURL: "https://i.imgur.com/7rVVxSH.png",
      })
      .setTimestamp()
  );
}


export function MainUserEmbed(
  member: GuildMember, 
  devices: Record<string, string> | null, 
  onVoice: string, 
  requester: GuildMember, 
  userData?: any) {
  const user = member.user;
  const guild = member.guild;
  const UserMention = `${user}`;
  const DateCreated = `> <t:${Math.floor(user.createdTimestamp / 1000)}:R>`;
  const DateJoined = `> <t:${Math.floor(member.joinedTimestamp! / 1000)}:R>`;
  const roleColor = member.displayHexColor === "#000000" ? "#2f3136" : member.displayHexColor;

  // ===== –†–æ–ª–∏ =====
  const filteredRoles = member.roles.cache
    .filter(r => r.id !== guild.id && !hiddenRoles.includes(r.id))
    .map(r => r.toString());

  let roles: string;
  if (filteredRoles.length === 0) roles = "‚ùå –ù–µ—Ç —Ä–æ–ª–µ–π";
  else if (filteredRoles.length > 4) {
    const shown = filteredRoles.slice(0, 4).join(", ");
    const more = filteredRoles.length - 4;
    roles = `${shown} –∏ –µ—â—ë ${more}`;
  } else roles = filteredRoles.join(",");

  // ===== –°—Ç–∞—Ç—É—Å =====
  const statusMap: Record<string, string> = {
    online: "> üü¢ –í —Å–µ—Ç–∏",
    idle: "> üåô –ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
    dnd: "> ‚õî –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å",
    offline: "> ‚ö´ –ù–µ –≤ —Å–µ—Ç–∏",
    invisible: "> üëª –ù–µ–≤–∏–¥–∏–º–∫–∞",
  };
  const presenceStatus = member.presence?.status || "offline";
  const userStatus = statusMap[presenceStatus];

  // ===== –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å =====
  let activityText = "> ‚ùå –ù–µ—Ç";
  const activity = member.presence?.activities[0];
  if (activity) {
    switch (activity.type) {
      case ActivityType.Playing:
        activityText = `> üéÆ –ò–≥—Ä–∞–µ—Ç –≤ **${activity.name}**`;
        break;
      case ActivityType.Listening:
        if (activity.name === "Spotify" && activity.details && activity.state) {
          activityText = `> üéµ –°–ª—É—à–∞–µ—Ç **${activity.state} ‚Äî ${activity.details}**`;
        } else {
          activityText = `> üéµ –°–ª—É—à–∞–µ—Ç **${activity.name}**`;
        }
        break;
      case ActivityType.Custom:
        activityText = activity.state
          ? `> üõë ${activity.state}`
          : "> üõë –ö–∞—Å—Ç–æ–º–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å";
        break;
      default:
        activityText = `> ‚úÖ ${activity.name}`;
        break;
    }
  }

  // ===== –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ =====
  const sessionMap: Record<string, string> = {
    desktop: "> üíª –î–µ—Å–∫—Ç–æ–ø",
    mobile: "> üì± –¢–µ–ª–µ—Ñ–æ–Ω",
    web: "> üåê –ë—Ä–∞—É–∑–µ—Ä",
  };
  const sessionTypes = devices
    ? Object.keys(devices)
      .map(device => sessionMap[device] || "> ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
      .join(", ")
    : "> ‚ö´ –ù–µ –≤ —Å–µ—Ç–∏";

  // ===== –ß–° —Å—Ç–∞—Ñ—Ñ–∞ =====
  const isBlocked = userData?.staffLocked ? "üíÄ –ï—Å—Ç—å" : "‚úÖ –ù–µ—Ç";

  // ===== –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ Embed =====
  return new EmbedBuilder()
    .setThumbnail(user.displayAvatarURL())
    .setColor(roleColor)
    .setAuthor({
      name: `–ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π`,
      iconURL: guild.iconURL() ?? undefined,
    })
    .setTitle(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî ${user.tag}`)
    .setDescription(`
      **–¢—ç–≥:** ${UserMention}
      **ID:** \`${user.id}\`
        **–†–æ–ª–∏:** ${roles}
      **–ß–° –°—Ç–∞—Ñ—Ñ–∞:** ${isBlocked}
    `)
    .addFields(
      { name: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è", value: DateJoined, inline: true },
      { name: "–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω", value: DateCreated, inline: true },
      { name: "–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª", value: onVoice, inline: true },
      { name: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", value: sessionTypes, inline: true },
      { name: "–°—Ç–∞—Ç—É—Å", value: userStatus, inline: true },
      { name: "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", value: activityText, inline: true },
    )
    .setFooter({
      text: `–ó–∞–ø—Ä–æ—Å –æ—Ç ${requester.user.username}`,
      iconURL: requester.user.displayAvatarURL() ?? undefined,
    })
    .setTimestamp();
}
