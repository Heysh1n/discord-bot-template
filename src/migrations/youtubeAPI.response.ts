import 'dotenv/config';
import axios, { AxiosInstance } from 'axios';


export interface YouTubeChannel {
  id: string;
  title: string;
  description: string;
  customUrl?: string;
  publishedAt: string;
  thumbnails: {
    default?: { url: string; width: number; height: number };
    medium?: { url: string; width: number; height: number };
    high?: { url: string; width: number; height: number };
  };
  viewCount: string;
  subscriberCount: string;
  videoCount: string;
}

export interface YouTubeVideo {
  id: string;
  title: string;
  description: string;
  publishedAt: string;
  thumbnails: {
    high?: { url: string };
    standard?: {url: string};
    maxres?: { url: string};
  };
  channelTitle: string;
}

export class YouTubeAPIClient {
  private apiKey: string;
  private axiosInstance: AxiosInstance;

  constructor() {
    this.apiKey = process.env.YOUTUBE_API_KEY || '';
    if (!this.apiKey) {
      throw new Error('‚ùå YOUTUBE_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
    }

    this.axiosInstance = axios.create({
      baseURL: 'https://www.googleapis.com/youtube/v3',
      params: {
        key: this.apiKey,
      },
    });
  }

  async getChannelByHandle(handle: string): Promise<YouTubeChannel | null> {
    if (!handle) {
      console.warn('‚ö†Ô∏è YouTube: –Ω–µ —É–∫–∞–∑–∞–Ω handle –∫–∞–Ω–∞–ª–∞');
      return null;
    }

    try {
      const response = await this.axiosInstance.get('/channels', {
        params: {
          forHandle: handle,
          part: 'snippet,statistics',
        },
      });

      if (!response.data?.items?.length) {
        console.warn(`üî¥ YouTube: –∫–∞–Ω–∞–ª —Å handle "${handle}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return null;
      }

      const item = response.data.items[0];
      const channel: YouTubeChannel = {
        id: item.id,
        title: item.snippet.title,
        description: item.snippet.description,
        customUrl: item.snippet.customUrl,
        publishedAt: item.snippet.publishedAt,
        thumbnails: item.snippet.thumbnails,
        viewCount: item.statistics.viewCount,
        subscriberCount: item.statistics.subscriberCount,
        videoCount: item.statistics.videoCount,
      };

      console.log(`‚úÖ YouTube: –∫–∞–Ω–∞–ª "${channel.title}" —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω`);
      return channel;
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ YouTube API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ "${handle}":`, error.message);
      if (error.response) {
        console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
        console.error('–¢–µ–ª–æ –æ—à–∏–±–∫–∏:', error.response.data);
      }
      return null;
    }
  }

  async getLatestVideos(channelId: string, maxResults = 5): Promise<YouTubeVideo[]> {
    if (!channelId) {
      console.warn('‚ö†Ô∏è YouTube: –Ω–µ —É–∫–∞–∑–∞–Ω ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ');
      return [];
    }

    try {
      const response = await this.axiosInstance.get('/search', {
        params: {
          channelId,
          part: 'snippet',
          order: 'date',
          type: 'video',
          maxResults,
        },
      });

      if (!response.data?.items?.length) {
        console.log(`üü° YouTube: —É –∫–∞–Ω–∞–ª–∞ ${channelId} –Ω–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ`);
        return [];
      }

      const videos = response.data.items.map((item: any) => ({
        id: item.id.videoId,
        title: item.snippet.title,
        description: item.snippet.description,
        publishedAt: item.snippet.publishedAt,
        thumbnails: item.snippet.thumbnails,
        channelTitle: item.snippet.channelTitle
      }));

      console.log(`‚úÖ YouTube: –ø–æ–ª—É—á–µ–Ω–æ ${videos.length} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∏–¥–µ–æ`);
      return videos;
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ YouTube API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelId}:`, error.message);
      if (error.response) {
        console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
        console.error('–¢–µ–ª–æ –æ—à–∏–±–∫–∏:', error.response.data);
      }
      return [];
    }
  }
}


// === –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===
// –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ npx ts-node src/migrations/youtubeAPI.response.ts
async function main() {
  const youtube = new YouTubeAPIClient();
  const channel = await youtube.getChannelByHandle('@heysh1n');
  if (channel) {
    const videos = await youtube.getLatestVideos(channel.id, 3);
    videos.forEach((video, i) => {
      console.log(`\nüé• –í–∏–¥–µ–æ ${i + 1}: ${video.title}`);
      console.log(`üë• –ü–æ–ø–∏—Å—á–∏–∫–∏: ${channel.subscriberCount}`);
      console.log(`üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${video.publishedAt}`);
    });
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º main(), —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}

export default YouTubeAPIClient;